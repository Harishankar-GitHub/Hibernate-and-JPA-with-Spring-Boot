spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
# The above line is configured when Spring Boot Version is >= 2.3.1
# If the above line is not used, then every time it generates a random JDBC URL for H2 Database connection.

spring.jpa.properties.hibernate.generate_statistics=true
# This is used to view the statistics like how many queries got fired to the database, how many rows affected etc.
logging.level.org.hibernate.stat=debug
# This is the package in Hibernate which is responsible for Statistics.
spring.jpa.show-sql=true
# To show all queries
logging.level.org.hibernate.type=trace
# This package is used while setting parameters to the query.
# In console, whenever a query is fired we can view the parameters of the query.

spring.jpa.properties.hibernate.format_sql=true
# To format queries. WARNING - Not to be used in Production


#Second Level Cache - EhCache (EhCache is a Caching Framework)
# Steps Start
#1. Enable Second Level Cache
spring.jpa.properties.hibernate.cache.use.second.level.cache=true

#2. Specify the Caching Framework. For example EhCache.
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.internal.EhcacheRegionFactory
# To get the above property value, Ctrl+Shift+T -> Search EhCacheRegionFactory -> Open that -> Right Click on Class Name -> Select Copy Qualified Name -> And paste it here.

#3. Only cache what I tell to cache.
spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE
# To view different values for the above property, Ctrl+Shift+T -> Search javax.persistence.sharedCache -> Open that.

#4. What data to cache ?
# We can put @Cacheable Annotation on any of the entities, so that it will be cached.
# Steps End

logging.level.net.sf.ehcache=debug
# To see what's happening in the background for ehCache.